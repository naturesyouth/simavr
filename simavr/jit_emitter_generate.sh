#!/bin/bash

cat sim/sim_core.c | gawk '
BEGIN {
	spewing = 0;
	print "/* THIS FILE IS AUTOGENERATED, DO NOT EDIT */";
	print "#ifndef __SIM_CORE_JIT_H__";
	print "#define __SIM_CORE_JIT_H__";
}
END {
	print "#endif /*__SIM_CORE_JIT_H__*/";
}
function quote(line) {
	gsub(/^[ \t]+/,"", line);
	gsub(/\\/,"\\\\", line);
	gsub(/["]/,"\\\"", line);
	return line;
}
/JIT_EXTRACT_START/ {
	spewing = 1;
}
/JIT_EXTRACT_END/ {
	spewing = 0;
}
/[^_]emit[^a-z_]/ {
	if (!match($0, "#define")) {
		accum = "";
		spewing = 0;
		sub(/emit/, "");
		print; next;
	}
}
/emit_literal[^a-z_]/ {
	if (!match($0, "#define")) {
		gsub(/emit_literal/, "jit_generate_literal");
		print;
		next;
	}
}
/emit_literal_flush[^a-z_]/ {
	if (!match($0, "#define")) {
		gsub(/emit_literal_flush/, "jit_literal_flush");
		print;
		next;
	}
}
/avr->data/ {
	gsub(/avr->data/, "avr_data");
}
/avr->flash/ {
	gsub(/avr->flash/, "avr_flash");
}
/end_emit/ {
	if (!match($0, "#define")) {
		spewing = 1;
		sub(/end_emit/, "break");
		print "jit_generate(opcode, " accum ");";
	}
}
{
	if (spewing)
		print;
	else {
		$0 = quote($0);
		accum = accum "\"" $0 "\\n\"" "\n";
	}
}
' >sim/sim_core_jit.h
